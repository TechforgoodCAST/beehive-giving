%script{:src => "https://api.mapbox.com/mapbox.js/v2.2.2/mapbox.js"}
%link{:href => "https://api.mapbox.com/mapbox.js/v2.2.2/mapbox.css", :rel => "stylesheet"}

= render partial: 'funders/recipients/subnav'

.uk-container.uk-container-center.uk-margin-large
  %h2 Non-profits
  %h4 You are seeing non-profits that Beehive thinks would be suitable for you.

  .uk-width-large-4-5.uk-container-center.uk-margin-large-top.uk-animation-fade
    :css
      .map-legend li {
        list-style: none;
      }
      .map-legend .swatch {
        width:20px;
        height:20px;
        float:left;
        margin-right:10px;
        }
      .leaflet-popup-close-button {
        display: none;
        }
      .leaflet-popup-content-wrapper {
        pointer-events: none;
        }
    #map{data: @map_data, style: 'height: 600px;'}
    :javascript
      var mapData = JSON.parse($('#map').attr('data'));
      L.mapbox.accessToken = 'pk.eyJ1IjoiYmVlaGl2ZWdpdmluZyIsImEiOiJjaWZma3IyM3cwMGp6dGprbnZ1ZnVubTY1In0.sAccvZGdUQt3fHhWhrpGfw';
        var map = L.mapbox.map('map', 'mapbox.streets')
          .addControl(L.mapbox.geocoderControl('mapbox.places'))
          .setView([54.515, -4.296], 6);

        var popup = new L.Popup({ autoPan: false });

        // statesData comes from the 'us-states.js' script included above
        var statesLayer = L.geoJson(mapData,  {
            style: getStyle,
            onEachFeature: onEachFeature
        }).addTo(map);

        function getStyle(feature) {
            return {
                weight: 2,
                opacity: 0.1,
                color: 'black',
                fillOpacity: 0.7,
                fillColor: getColor(feature.properties.grant_count)
            };
        }

        // get color depending on population density value
        function getColor(d) {
            return d > 7 ? '#8c2d04' :
                d > 6  ? '#cc4c02' :
                d > 5  ? '#ec7014' :
                d > 4  ? '#fe9929' :
                d > 3   ? '#fec44f' :
                d > 2   ? '#fee391' :
                d > 1   ? '#fff7bc' :
                '#ffffe5';
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mousemove: mousemove,
                mouseout: mouseout,
                click: zoomToFeature
            });
        }

        var closeTooltip;

        function mousemove(e) {
            var layer = e.target;

            popup.setLatLng(e.latlng);
            popup.setContent('' + layer.feature.properties.name + '' +
                'Grants given:' + layer.feature.properties.grant_count);

            if (!popup._map) popup.openOn(map);
            window.clearTimeout(closeTooltip);

            // highlight feature
            layer.setStyle({
                weight: 3,
                opacity: 0.3,
                fillOpacity: 0.9
            });

            if (!L.Browser.ie && !L.Browser.opera) {
                layer.bringToFront();
            }
        }

        function mouseout(e) {
            statesLayer.resetStyle(e.target);
            closeTooltip = window.setTimeout(function() {
                map.closePopup();
            }, 100);
        }

        function zoomToFeature(e) {
            map.fitBounds(e.target.getBounds());
        }

        map.legendControl.addLegend(getLegendHTML());

        function getLegendHTML() {
          var grades = [0, 1, 2, 3, 4, 5, 6, 7],
          labels = [],
          from, to;

          for (var i = 0; i < grades.length; i++) {
            from = grades[i];
            to = grades[i + 1];

            labels.push(
              ' ' +
              from + (to ? '&ndash;' + to : '+')) + '';
          }

          return 'No. of grants given' + labels.join('') + '';
        }
